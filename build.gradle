plugins {
    id 'com.android.library'
}

android {
    namespace 'com.shockwave.pdfium'

    compileSdk 35

    defaultConfig {
        minSdk 21
        targetSdk 35
        versionCode 1
        versionName "1.9.0"
        consumerProguardFiles 'proguard-rules.pro'

        buildConfigField "String", "VERSION_NAME", '"${defaultConfig.versionName}"'

        ndk { abiFilters "arm64-v8a","armeabi-v7a","x86_64","x86" }
    }

    ndkVersion = "28.0.13004108"
    externalNativeBuild {
        ndkBuild { path "src/main/jni/Android.mk" }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        buildConfig = true
    }
}

dependencies {
    implementation "androidx.collection:collection:1.5.0"
}

// ===== ndk-build + jniLibs 동기화 자동화 =====

// ANDROID_NDK_HOME 환경변수 우선 사용 (없으면 'ndk-build' 가정)
def isWindows = System.properties['os.name'].toLowerCase().contains('win')
def ndkVer    = android.ndkVersion                         // 예: 28.0.13004108
def sdkDir      = android.sdkDirectory                       // local.properties의 sdk.dir
def ndkDir      = file("${sdkDir}/ndk/${ndkVer}")
def ndkBuild  = new File(ndkDir, isWindows ? "ndk-build.cmd" : "ndk-build").absolutePath

tasks.register("ndkBuildLibs", Exec) {
    workingDir("$projectDir/src/main/jni")
    // clean 먼저 하고 싶으면 아래 라인 추가:
    // commandLine ndkBuild, "clean"
    commandLine ndkBuild, "NDK_PROJECT_PATH=.",
            "APP_BUILD_SCRIPT=Android.mk",
            "NDK_APPLICATION_MK=Application.mk",
            "-j"
}

tasks.register("syncJniLibs", Copy) {
    from("$projectDir/libs") {
        include "**/libjniPdfium.so"
    }
    into("$projectDir/src/main/jniLibs")
}

tasks.named("preBuild").configure {
    dependsOn("ndkBuildLibs", "syncJniLibs")
}